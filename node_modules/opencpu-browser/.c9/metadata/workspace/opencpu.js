{"filter":false,"title":"opencpu.js","tooltip":"/opencpu.js","undoManager":{"mark":7,"position":7,"stack":[[{"start":{"row":0,"column":0},"end":{"row":386,"column":13},"action":"insert","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.3"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use opencpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," * opencpu.seturl(\"/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"https://public.opencpu.org/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"../R\") //default value"," */","","(function ( $ ) {","  ","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key){","    this.loc = loc;","    this.key = key;","    ","    this.getKey = function(){","      return key;","    }","    ","    this.getLoc = function(){","      return loc;","    }","    ","    this.getFile = function(path){","      return this.getLoc() + \"files/\" + path;","    }","","    this.getObject = function(name){","      var name = name || \".val\";","      return this.getLoc() + \"R/\" + name;","    }","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code;","    ","    this.getCode = function(){","      return code;","    }","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    }","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    var settings = settings || {};","    var handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      ","      //in case of cors we translate the relative path","      if(r_cors){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText)","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json',      ","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data),","      contentType : 'x-www-form-urlencoded',       ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      contentType : 'multipart/form-data',       ","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    var hasfiles = false;","    var hascode = false;","    var args = args || {};","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode || r_cors){","      //note: cors with application/json requires preflighting, which is supported but annoying.","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function r_fun_json(fun, args, handler){","    return r_fun_call(fun, args, function(tmp){","      $.get(tmp.getLoc() + \"R/.val/json\", function(data){","        handler && handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + loc);","      });","    });","  }","  ","  //post form data (including files)","  $.fn.r_post_form = function(fun, handler) {","    ","    testhtml5();    ","    var targetform = this; ","    var postdata = new FormData(targetform[0]);","    ","    return r_fun_ajax(fun, {","      data: postdata,","      cache: false,","      contentType: false,","      processData: false   ","    }, handler);","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.r_fun_plot = function(fun, args) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);"," ","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","    }).always(function(){","      myplot.spinner.hide();      ","    });","  }","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:absolute; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","  ","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","  ","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","  ","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11.69&height=8.27\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      }","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    }","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.opencpu = window.opencpu || {};","  var opencpu = window.opencpu;","  ","  //global settings","  opencpu.seturl = function(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href)","      }","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      });","    }","  }","","  //exported functions","  opencpu.r_fun_call = r_fun_call;","  opencpu.r_fun_json = r_fun_json;","  ","  //exported constructors","  opencpu.Session = Session;","  opencpu.Snippet = Snippet;","  opencpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","      ","}( jQuery ));"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":386,"column":13},"action":"remove","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.3"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use opencpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," * opencpu.seturl(\"/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"https://public.opencpu.org/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"../R\") //default value"," */","","(function ( $ ) {","  ","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key){","    this.loc = loc;","    this.key = key;","    ","    this.getKey = function(){","      return key;","    }","    ","    this.getLoc = function(){","      return loc;","    }","    ","    this.getFile = function(path){","      return this.getLoc() + \"files/\" + path;","    }","","    this.getObject = function(name){","      var name = name || \".val\";","      return this.getLoc() + \"R/\" + name;","    }","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code;","    ","    this.getCode = function(){","      return code;","    }","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    }","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    var settings = settings || {};","    var handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      ","      //in case of cors we translate the relative path","      if(r_cors){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText)","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json',      ","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data),","      contentType : 'x-www-form-urlencoded',       ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      contentType : 'multipart/form-data',       ","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    var hasfiles = false;","    var hascode = false;","    var args = args || {};","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode || r_cors){","      //note: cors with application/json requires preflighting, which is supported but annoying.","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function r_fun_json(fun, args, handler){","    return r_fun_call(fun, args, function(tmp){","      $.get(tmp.getLoc() + \"R/.val/json\", function(data){","        handler && handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + loc);","      });","    });","  }","  ","  //post form data (including files)","  $.fn.r_post_form = function(fun, handler) {","    ","    testhtml5();    ","    var targetform = this; ","    var postdata = new FormData(targetform[0]);","    ","    return r_fun_ajax(fun, {","      data: postdata,","      cache: false,","      contentType: false,","      processData: false   ","    }, handler);","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.r_fun_plot = function(fun, args) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);"," ","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","    }).always(function(){","      myplot.spinner.hide();      ","    });","  }","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:absolute; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","  ","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","  ","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","  ","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11.69&height=8.27\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      }","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    }","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.opencpu = window.opencpu || {};","  var opencpu = window.opencpu;","  ","  //global settings","  opencpu.seturl = function(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href)","      }","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      });","    }","  }","","  //exported functions","  opencpu.r_fun_call = r_fun_call;","  opencpu.r_fun_json = r_fun_json;","  ","  //exported constructors","  opencpu.Session = Session;","  opencpu.Snippet = Snippet;","  opencpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","      ","}( jQuery ));"],"id":2},{"start":{"row":0,"column":0},"end":{"row":451,"column":13},"action":"insert","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.5.0"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," *"," * Include this file in your apps and packages."," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," * ocpu.seturl(\"https://user:secret/my.server.com/ocpu/library/pkg/R\") // basic auth"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key;","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      var new_url = document.createElement('a');","      new_url.href = this.getLoc() + \"files/\" + path;","      new_url.username = r_path.username;","      new_url.password = r_path.password","      return new_url.href;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","","    this.getCode = function(){","      return code;","    };","  }","","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","","    this.getFile = function(){","      return file;","    };","  }","","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x;","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","","    //function chaining","    return jqxhr;","  }","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }","","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)","    }, handler);","  }","","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false","    }, handler);","  }","","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler);","    }","  }","","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();","    });","  };","","  $.fn.graphic = function(session, n){","    initplot(this).setlocation(session.getLoc(), n || \"last\");","  }","","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var n = \"last\";","      var pngwidth;","      var pngheight;","","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\"","      }).text(\"loading...\").appendTo(plotdiv).hide();","","      var pdf = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);","","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/\" + n + \"/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");","      }","","      function setlocation(newloc, newn){","        n = newn || n;","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/\" + n + \"/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/\" + n + \"/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/\" + n + \"/png?width=800&height=600\").show();","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }","      }, 500);","","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);","","      //return objects","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }","  }","","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        } else if(r_path.username && r_path.password) {","          //should only do this for calls to opencpu maybe","          var regex = new RegExp(r_path.host);","          $.ajaxSetup({","            beforeSend: function(xhr, settings) {","              //only use auth for ajax requests to ocpu","              if(regex.test(settings.url)){","                //settings.username = r_path.username;","                //settings.password = r_path.password;","","                /* take out user:pass from target url */","                var target = document.createElement('a');","                target.href = settings.url;","                settings.url = target.protocol + \"//\" + target.host + target.pathname","","                /* set basic auth header */","                settings.xhrFields = settings.xhrFields || {};","                settings.xhrFields.withCredentials = true;","                settings.crossDomain = true;","                xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(r_path.username + \":\" + r_path.password));","","                /* debug */","                console.log(\"Authenticated request to: \" + settings.url + \" (\" + r_path.username + \", \" + r_path.password + \")\")","              }","            }","          });","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //CORS disallows redirects.","      return $.get(r_path.href + \"/\", function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }","","}( jQuery ));"]}],[{"start":{"row":0,"column":0},"end":{"row":451,"column":13},"action":"remove","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.5.0"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," *"," * Include this file in your apps and packages."," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," * ocpu.seturl(\"https://user:secret/my.server.com/ocpu/library/pkg/R\") // basic auth"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key;","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      var new_url = document.createElement('a');","      new_url.href = this.getLoc() + \"files/\" + path;","      new_url.username = r_path.username;","      new_url.password = r_path.password","      return new_url.href;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","","    this.getCode = function(){","      return code;","    };","  }","","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","","    this.getFile = function(){","      return file;","    };","  }","","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x;","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","","    //function chaining","    return jqxhr;","  }","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }","","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)","    }, handler);","  }","","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false","    }, handler);","  }","","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler);","    }","  }","","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();","    });","  };","","  $.fn.graphic = function(session, n){","    initplot(this).setlocation(session.getLoc(), n || \"last\");","  }","","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var n = \"last\";","      var pngwidth;","      var pngheight;","","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\"","      }).text(\"loading...\").appendTo(plotdiv).hide();","","      var pdf = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);","","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/\" + n + \"/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");","      }","","      function setlocation(newloc, newn){","        n = newn || n;","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/\" + n + \"/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/\" + n + \"/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/\" + n + \"/png?width=800&height=600\").show();","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }","      }, 500);","","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);","","      //return objects","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }","  }","","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        } else if(r_path.username && r_path.password) {","          //should only do this for calls to opencpu maybe","          var regex = new RegExp(r_path.host);","          $.ajaxSetup({","            beforeSend: function(xhr, settings) {","              //only use auth for ajax requests to ocpu","              if(regex.test(settings.url)){","                //settings.username = r_path.username;","                //settings.password = r_path.password;","","                /* take out user:pass from target url */","                var target = document.createElement('a');","                target.href = settings.url;","                settings.url = target.protocol + \"//\" + target.host + target.pathname","","                /* set basic auth header */","                settings.xhrFields = settings.xhrFields || {};","                settings.xhrFields.withCredentials = true;","                settings.crossDomain = true;","                xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(r_path.username + \":\" + r_path.password));","","                /* debug */","                console.log(\"Authenticated request to: \" + settings.url + \" (\" + r_path.username + \", \" + r_path.password + \")\")","              }","            }","          });","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //CORS disallows redirects.","      return $.get(r_path.href + \"/\", function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }","","}( jQuery ));"],"id":3},{"start":{"row":0,"column":0},"end":{"row":413,"column":13},"action":"insert","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.4.4"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key; ","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","    ","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      return this.getLoc() + \"files/\" + path;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","    ","    this.getCode = function(){","      return code;","    };","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    };","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","      ","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)      ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","      ","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();      ","    });","  };","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","  ","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //we use trycatch because javascript will throw an error in case CORS is refused.","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","  ","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","","}( jQuery ));"]}],[{"start":{"row":0,"column":0},"end":{"row":413,"column":13},"action":"remove","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.4.4"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key; ","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","    ","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      return this.getLoc() + \"files/\" + path;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","    ","    this.getCode = function(){","      return code;","    };","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    };","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","      ","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)      ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","      ","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();      ","    });","  };","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","  ","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //we use trycatch because javascript will throw an error in case CORS is refused.","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","  ","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","","}( jQuery ));"],"id":4},{"start":{"row":0,"column":0},"end":{"row":386,"column":13},"action":"insert","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.3"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use opencpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," * opencpu.seturl(\"/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"https://public.opencpu.org/ocpu/library/mypackage/R\")"," * opencpu.seturl(\"../R\") //default value"," */","","(function ( $ ) {","  ","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key){","    this.loc = loc;","    this.key = key;","    ","    this.getKey = function(){","      return key;","    }","    ","    this.getLoc = function(){","      return loc;","    }","    ","    this.getFile = function(path){","      return this.getLoc() + \"files/\" + path;","    }","","    this.getObject = function(name){","      var name = name || \".val\";","      return this.getLoc() + \"R/\" + name;","    }","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code;","    ","    this.getCode = function(){","      return code;","    }","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    }","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    var settings = settings || {};","    var handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      ","      //in case of cors we translate the relative path","      if(r_cors){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText)","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json',      ","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data),","      contentType : 'x-www-form-urlencoded',       ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      contentType : 'multipart/form-data',       ","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    var hasfiles = false;","    var hascode = false;","    var args = args || {};","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode || r_cors){","      //note: cors with application/json requires preflighting, which is supported but annoying.","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function r_fun_json(fun, args, handler){","    return r_fun_call(fun, args, function(tmp){","      $.get(tmp.getLoc() + \"R/.val/json\", function(data){","        handler && handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + loc);","      });","    });","  }","  ","  //post form data (including files)","  $.fn.r_post_form = function(fun, handler) {","    ","    testhtml5();    ","    var targetform = this; ","    var postdata = new FormData(targetform[0]);","    ","    return r_fun_ajax(fun, {","      data: postdata,","      cache: false,","      contentType: false,","      processData: false   ","    }, handler);","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.r_fun_plot = function(fun, args) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);"," ","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","    }).always(function(){","      myplot.spinner.hide();      ","    });","  }","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:absolute; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","  ","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","  ","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","  ","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11.69&height=8.27\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      }","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    }","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.opencpu = window.opencpu || {};","  var opencpu = window.opencpu;","  ","  //global settings","  opencpu.seturl = function(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href)","      }","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      });","    }","  }","","  //exported functions","  opencpu.r_fun_call = r_fun_call;","  opencpu.r_fun_json = r_fun_json;","  ","  //exported constructors","  opencpu.Session = Session;","  opencpu.Snippet = Snippet;","  opencpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","      ","}( jQuery ));"]}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"remove","lines":["3"],"id":5,"ignore":true},{"start":{"row":2,"column":13},"end":{"row":2,"column":16},"action":"insert","lines":["4.4"]},{"start":{"row":8,"column":25},"end":{"row":8,"column":28},"action":"remove","lines":["pen"]},{"start":{"row":9,"column":2},"end":{"row":9,"column":7},"action":"remove","lines":[" open"]},{"start":{"row":9,"column":2},"end":{"row":10,"column":4},"action":"insert","lines":[""," * o"]},{"start":{"row":10,"column":16},"end":{"row":10,"column":43},"action":"remove","lines":["/ocpu/library/mypackage/R\")"]},{"start":{"row":10,"column":16},"end":{"row":10,"column":46},"action":"insert","lines":["../R\") //default, use for apps"]},{"start":{"row":11,"column":4},"end":{"row":11,"column":7},"action":"remove","lines":["pen"]},{"start":{"row":11,"column":16},"end":{"row":11,"column":22},"action":"remove","lines":["https:"]},{"start":{"row":11,"column":63},"end":{"row":11,"column":70},"action":"insert","lines":[" //CORS"]},{"start":{"row":12,"column":4},"end":{"row":12,"column":7},"action":"remove","lines":["pen"]},{"start":{"row":12,"column":16},"end":{"row":13,"column":3},"action":"remove","lines":["../R\") //default value"," */"]},{"start":{"row":12,"column":16},"end":{"row":18,"column":1},"action":"insert","lines":["/ocpu/library/mypackage/R\") //hardcode path"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}"]},{"start":{"row":21,"column":0},"end":{"row":21,"column":2},"action":"remove","lines":["  "]},{"start":{"row":29,"column":27},"end":{"row":29,"column":32},"action":"insert","lines":[", txt"]},{"start":{"row":31,"column":19},"end":{"row":31,"column":20},"action":"insert","lines":[" "]},{"start":{"row":32,"column":4},"end":{"row":34,"column":0},"action":"insert","lines":["this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);",""]},{"start":{"row":37,"column":5},"end":{"row":37,"column":6},"action":"insert","lines":[";"]},{"start":{"row":41,"column":5},"end":{"row":41,"column":6},"action":"insert","lines":[";"]},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"remove","lines":["    "]},{"start":{"row":43,"column":16},"end":{"row":43,"column":19},"action":"insert","lines":["URL"]},{"start":{"row":45,"column":5},"end":{"row":48,"column":9},"action":"remove","lines":["","","    this.getObject = function(name){","      var"]},{"start":{"row":45,"column":5},"end":{"row":54,"column":5},"action":"insert","lines":[";","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","     "]},{"start":{"row":55,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["",""]},{"start":{"row":56,"column":6},"end":{"row":57,"column":5},"action":"remove","lines":["return this.getLoc() + \"R/\" + name;","    }"]},{"start":{"row":56,"column":6},"end":{"row":75,"column":6},"action":"insert","lines":["//first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };"]},{"start":{"row":81,"column":20},"end":{"row":81,"column":30},"action":"insert","lines":[" || \"NULL\""]},{"start":{"row":85,"column":5},"end":{"row":85,"column":6},"action":"insert","lines":[";"]},{"start":{"row":105,"column":5},"end":{"row":105,"column":6},"action":"insert","lines":[";"]},{"start":{"row":132,"column":4},"end":{"row":132,"column":8},"action":"remove","lines":["var "]},{"start":{"row":133,"column":4},"end":{"row":133,"column":8},"action":"remove","lines":["var "]},{"start":{"row":145,"column":0},"end":{"row":146,"column":0},"action":"insert","lines":["      var txt = jqxhr.responseText;",""]},{"start":{"row":147,"column":37},"end":{"row":147,"column":41},"action":"remove","lines":["the "]},{"start":{"row":147,"column":50},"end":{"row":148,"column":15},"action":"remove","lines":["","      if(r_cors"]},{"start":{"row":147,"column":50},"end":{"row":148,"column":38},"action":"insert","lines":["s to the target domain","      if(r_cors && loc.match(\"^/[^/]\")"]},{"start":{"row":151,"column":34},"end":{"row":151,"column":39},"action":"insert","lines":[", txt"]},{"start":{"row":153,"column":83},"end":{"row":153,"column":84},"action":"insert","lines":[";"]},{"start":{"row":164,"column":38},"end":{"row":164,"column":45},"action":"remove","lines":[",      "]},{"start":{"row":176,"column":25},"end":{"row":177,"column":45},"action":"remove","lines":[",","      contentType : 'x-www-form-urlencoded', "]},{"start":{"row":190,"column":0},"end":{"row":191,"column":0},"action":"remove","lines":["      contentType : 'multipart/form-data',       ",""]},{"start":{"row":198,"column":0},"end":{"row":199,"column":0},"action":"insert","lines":["    args = args || {};",""]},{"start":{"row":201,"column":0},"end":{"row":202,"column":0},"action":"remove","lines":["    var args = args || {};",""]},{"start":{"row":214,"column":21},"end":{"row":215,"column":96},"action":"remove","lines":[" || r_cors){","      //note: cors with application/json requires preflighting, which is supported but annoying."]},{"start":{"row":214,"column":21},"end":{"row":214,"column":23},"action":"insert","lines":["){"]},{"start":{"row":222,"column":12},"end":{"row":222,"column":21},"action":"remove","lines":["_fun_json"]},{"start":{"row":222,"column":12},"end":{"row":222,"column":14},"action":"insert","lines":["pc"]},{"start":{"row":223,"column":42},"end":{"row":223,"column":45},"action":"remove","lines":["tmp"]},{"start":{"row":223,"column":42},"end":{"row":223,"column":49},"action":"insert","lines":["session"]},{"start":{"row":224,"column":6},"end":{"row":224,"column":42},"action":"remove","lines":["$.get(tmp.getLoc() + \"R/.val/json\", "]},{"start":{"row":224,"column":6},"end":{"row":224,"column":24},"action":"insert","lines":["session.getObject("]},{"start":{"row":225,"column":8},"end":{"row":225,"column":11},"action":"insert","lines":["if("]},{"start":{"row":225,"column":18},"end":{"row":225,"column":21},"action":"remove","lines":[" &&"]},{"start":{"row":225,"column":18},"end":{"row":225,"column":19},"action":"insert","lines":[")"]},{"start":{"row":227,"column":57},"end":{"row":244,"column":14},"action":"remove","lines":["loc);","      });","    });","  }","  ","  //post form data (including files)","  $.fn.r_post_form = function(fun, handler) {","    ","    testhtml5();    ","    var targetform = this; ","    var postdata = new FormData(targetform[0]);","    ","    return r_fun_ajax(fun, {","      data: postdata,","      cache: false,","      contentType: false,","      processData: false   ","    }, handler"]},{"start":{"row":227,"column":57},"end":{"row":229,"column":5},"action":"insert","lines":["session.getLoc());","      });","    }"]},{"start":{"row":234,"column":8},"end":{"row":234,"column":13},"action":"remove","lines":["_fun_"]},{"start":{"row":234,"column":33},"end":{"row":234,"column":37},"action":"insert","lines":[", cb"]},{"start":{"row":237,"column":0},"end":{"row":237,"column":1},"action":"remove","lines":[" "]},{"start":{"row":245,"column":0},"end":{"row":248,"column":0},"action":"insert","lines":["      ","      //call success handler as well","      if(cb) cb(tmp);",""]},{"start":{"row":251,"column":3},"end":{"row":251,"column":4},"action":"insert","lines":[";"]},{"start":{"row":259,"column":18},"end":{"row":259,"column":19},"action":"insert","lines":[";"]},{"start":{"row":264,"column":88},"end":{"row":264,"column":95},"action":"remove","lines":["absolut"]},{"start":{"row":264,"column":88},"end":{"row":264,"column":95},"action":"insert","lines":["relativ"]},{"start":{"row":270,"column":0},"end":{"row":270,"column":2},"action":"remove","lines":["  "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":2},"action":"remove","lines":["  "]},{"start":{"row":280,"column":0},"end":{"row":280,"column":2},"action":"remove","lines":["  "]},{"start":{"row":302,"column":65},"end":{"row":302,"column":68},"action":"remove","lines":[".69"]},{"start":{"row":302,"column":73},"end":{"row":302,"column":77},"action":"remove","lines":["8.27"]},{"start":{"row":302,"column":73},"end":{"row":302,"column":74},"action":"insert","lines":["6"]},{"start":{"row":326,"column":7},"end":{"row":326,"column":8},"action":"insert","lines":[";"]},{"start":{"row":350,"column":5},"end":{"row":350,"column":6},"action":"insert","lines":[";"]},{"start":{"row":361,"column":10},"end":{"row":361,"column":13},"action":"remove","lines":["pen"]},{"start":{"row":361,"column":24},"end":{"row":361,"column":27},"action":"remove","lines":["pen"]},{"start":{"row":362,"column":7},"end":{"row":362,"column":10},"action":"remove","lines":["pen"]},{"start":{"row":362,"column":21},"end":{"row":362,"column":24},"action":"remove","lines":["pen"]},{"start":{"row":365,"column":1},"end":{"row":365,"column":18},"action":"remove","lines":[" opencpu.seturl ="]},{"start":{"row":365,"column":10},"end":{"row":365,"column":17},"action":"insert","lines":[" seturl"]},{"start":{"row":380,"column":0},"end":{"row":384,"column":0},"action":"insert","lines":["      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","",""]},{"start":{"row":387,"column":77},"end":{"row":387,"column":78},"action":"insert","lines":[";"]},{"start":{"row":388,"column":7},"end":{"row":390,"column":87},"action":"insert","lines":["","","      //we use trycatch because javascript will throw an error in case CORS is refused."]},{"start":{"row":393,"column":0},"end":{"row":395,"column":0},"action":"insert","lines":["      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);",""]},{"start":{"row":400,"column":3},"end":{"row":400,"column":6},"action":"remove","lines":["pen"]},{"start":{"row":400,"column":7},"end":{"row":400,"column":13},"action":"remove","lines":["r_fun_"]},{"start":{"row":401,"column":3},"end":{"row":401,"column":6},"action":"remove","lines":["pen"]},{"start":{"row":401,"column":8},"end":{"row":401,"column":30},"action":"remove","lines":["_fun_json = r_fun_json"]},{"start":{"row":401,"column":8},"end":{"row":402,"column":22},"action":"insert","lines":["pc = rpc;","  ocpu.seturl = seturl"]},{"start":{"row":405,"column":3},"end":{"row":406,"column":6},"action":"remove","lines":["pencpu.Session = Session;","  open"]},{"start":{"row":406,"column":3},"end":{"row":406,"column":6},"action":"remove","lines":["pen"]},{"start":{"row":412,"column":0},"end":{"row":412,"column":6},"action":"remove","lines":["      "]}],[{"start":{"row":0,"column":0},"end":{"row":413,"column":13},"action":"remove","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.4.4"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," * "," * Include this file in your apps and packages. "," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable ","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key; ","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","    ","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      return this.getLoc() + \"files/\" + path;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","  ","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","    ","    this.getCode = function(){","      return code;","    };","  }","  ","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","    ","    this.getFile = function(){","      return file;","    };","  }","  ","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x; ","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","  ","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","    ","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","    ","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","      ","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","    ","    //function chaining","    return jqxhr;","  }  ","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }   ","  ","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)      ","    }, handler);    ","  }","  ","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false      ","    }, handler);       ","  }","  ","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","    ","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","    ","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler); ","    }","  }    ","  ","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","  ","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","      ","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();      ","    });","  };","  ","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var pngwidth;","      var pngheight;","      ","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","      ","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\" ","      }).text(\"loading...\").appendTo(plotdiv);","","      var pdf = $('<a />').attr({","        target: \"_blank\",        ","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);  ","      ","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/last/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");       ","      }","      ","      function setlocation(newloc){","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/last/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/last/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/last/png?width=800&height=600\").show(); ","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }        ","      }, 500);   ","      ","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);  ","      ","      //return objects      ","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","    ","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","  ","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }    ","  }","  ","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","  ","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //we use trycatch because javascript will throw an error in case CORS is refused.","      $.get(r_path.href, function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","  ","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","  ","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }  ","","}( jQuery ));"],"id":6,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":69},"action":"insert","lines":["https://github.com/jeroenooms/opencpu.js/blob/gh-pages/opencpu-0.5.js"],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":69},"action":"remove","lines":["https://github.com/jeroenooms/opencpu.js/blob/gh-pages/opencpu-0.5.js"],"id":8},{"start":{"row":0,"column":0},"end":{"row":451,"column":13},"action":"insert","lines":["/**"," * Javascript client library for OpenCPU"," * Version 0.5.0"," * Depends: jQuery"," * Requires HTML5 FormData support for file uploads"," * http://github.com/jeroenooms/opencpu.js"," *"," * Include this file in your apps and packages."," * You only need to use ocpu.seturl if this page is hosted outside of the OpenCPU package. For example:"," *"," * ocpu.seturl(\"../R\") //default, use for apps"," * ocpu.seturl(\"//public.opencpu.org/ocpu/library/mypackage/R\") //CORS"," * ocpu.seturl(\"/ocpu/library/mypackage/R\") //hardcode path"," * ocpu.seturl(\"https://user:secret/my.server.com/ocpu/library/pkg/R\") // basic auth"," */","","//Warning for the newbies","if(!window.jQuery) {","  alert(\"Could not find jQuery! The HTML must include jquery.js before opencpu.js!\")","}","","(function ( $ ) {","","  //global variable","  var r_cors = false;","  var r_path = document.createElement('a');","  r_path.href = \"../R\";","","","  //new Session()","  function Session(loc, key, txt){","    this.loc = loc;","    this.key = key;","    this.txt = txt;","    this.output = txt.split(/\\r\\n|\\r|\\n/g);","","    this.getKey = function(){","      return key;","    };","","    this.getLoc = function(){","      return loc;","    };","","    this.getFileURL = function(path){","      var new_url = document.createElement('a');","      new_url.href = this.getLoc() + \"files/\" + path;","      new_url.username = r_path.username;","      new_url.password = r_path.password","      return new_url.href;","    };","","    this.getFile = function(path, success){","      var url = this.getFileURL(path);","      return $.get(url, success);","    };","","    this.getObject = function(name, data, success){","      //in case of no arguments","      name = name || \".val\";","","      //first arg is a function","      if(name instanceof Function){","        //pass on to second arg","        success = name;","        name = \".val\";","      }","","      var url = this.getLoc() + \"R/\" + name + \"/json\";","      return $.get(url, data, success);","    };","","    this.getStdout = function(success){","      var url = this.getLoc() + \"stdout/text\";","      return $.get(url, success);","    };","","    this.getConsole = function(success){","      var url = this.getLoc() + \"console/text\";","      return $.get(url, success);","    };","  }","","  //for POSTing raw code snippets","  //new Snippet(\"rnorm(100)\")","  function Snippet(code){","    this.code = code || \"NULL\";","","    this.getCode = function(){","      return code;","    };","  }","","  //for POSTing files","  //new Upload($('#file')[0].files)","  function Upload(file){","    if(file instanceof File){","      this.file = file;","    } else if(file instanceof FileList){","      this.file = file[0];","    } else if (file.files instanceof FileList){","      this.file = file.files[0];","    } else if (file.length > 0 && file[0].files instanceof FileList){","      this.file = file[0].files[0];","    } else {","      throw 'invalid new Upload(file). Argument file must be a HTML <input type=\"file\"></input>';","    }","","    this.getFile = function(){","      return file;","    };","  }","","  function stringify(x){","    if(x instanceof Session){","      return x.getKey();","    } else if(x instanceof Snippet){","      return x.getCode();","    } else if(x instanceof Upload){","      return x.getFile();","    } else if(x instanceof File){","      return x;","    } else if(x instanceof FileList){","      return x[0];","    } else if(x && x.files instanceof FileList){","      return x.files[0];","    } else if(x && x.length && x[0].files instanceof FileList){","      return x[0].files[0];","    } else {","      return JSON.stringify(x);","    }","  }","","  //low level call","  function r_fun_ajax(fun, settings, handler){","    //validate input","    if(!fun) throw \"r_fun_call called without fun\";","    settings = settings || {};","    handler = handler || function(){};","","    //set global settings","    settings.url = settings.url || (r_path.href + \"/\" + fun);","    settings.type = settings.type || \"POST\";","    settings.data = settings.data || {};","    settings.dataType = settings.dataType || \"text\";","","    //ajax call","    var jqxhr = $.ajax(settings).done(function(){","      var loc = jqxhr.getResponseHeader('Location') || console.log(\"Location response header missing.\");","      var key = jqxhr.getResponseHeader('X-ocpu-session') || console.log(\"X-ocpu-session response header missing.\");","      var txt = jqxhr.responseText;","","      //in case of cors we translate relative paths to the target domain","      if(r_cors && loc.match(\"^/[^/]\")){","        loc = r_path.protocol + \"//\" + r_path.host + loc;","      }","      handler(new Session(loc, key, txt));","    }).fail(function(){","      console.log(\"OpenCPU error HTTP \" + jqxhr.status + \"\\n\" + jqxhr.responseText);","    });","","    //function chaining","    return jqxhr;","  }","","  //call a function using uson arguments","  function r_fun_call_json(fun, args, handler){","    return r_fun_ajax(fun, {","      data: JSON.stringify(args || {}),","      contentType : 'application/json'","    }, handler);","  }","","  //call function using url encoding","  //needs to wrap arguments in quotes, etc","  function r_fun_call_urlencoded(fun, args, handler){","    var data = {};","    $.each(args, function(key, val){","      data[key] = stringify(val);","    });","    return r_fun_ajax(fun, {","      data: $.param(data)","    }, handler);","  }","","  //call a function using multipart/form-data","  //use for file uploads. Requires HTML5","  function r_fun_call_multipart(fun, args, handler){","    testhtml5();","    var formdata = new FormData();","    $.each(args, function(key, value) {","      formdata.append(key, stringify(value));","    });","    return r_fun_ajax(fun, {","      data: formdata,","      cache: false,","      contentType: false,","      processData: false","    }, handler);","  }","","  //Automatically determines type based on argument classes.","  function r_fun_call(fun, args, handler){","    args = args || {};","    var hasfiles = false;","    var hascode = false;","","    //find argument types","    $.each(args, function(key, value){","      if(value instanceof File || value instanceof Upload || value instanceof FileList){","        hasfiles = true;","      } else if (value instanceof Snippet || value instanceof Session){","        hascode = true;","      }","    });","","    //determine type","    if(hasfiles){","      return r_fun_call_multipart(fun, args, handler);","    } else if(hascode){","      return r_fun_call_urlencoded(fun, args, handler);","    } else {","      return r_fun_call_json(fun, args, handler);","    }","  }","","  //call a function and return JSON","  function rpc(fun, args, handler){","    return r_fun_call(fun, args, function(session){","      session.getObject(function(data){","        if(handler) handler(data);","      }).fail(function(){","        console.log(\"Failed to get JSON response for \" + session.getLoc());","      });","    });","  }","","  //plotting widget","  //to be called on an (empty) div.","  $.fn.rplot = function(fun, args, cb) {","    var targetdiv = this;","    var myplot = initplot(targetdiv);","","    //reset state","    myplot.setlocation();","    myplot.spinner.show();","","    // call the function","    return r_fun_call(fun, args, function(tmp) {","      myplot.setlocation(tmp.getLoc());","","      //call success handler as well","      if(cb) cb(tmp);","    }).always(function(){","      myplot.spinner.hide();","    });","  };","","  $.fn.graphic = function(session, n){","    initplot(this).setlocation(session.getLoc(), n || \"last\");","  }","","  function initplot(targetdiv){","    if(targetdiv.data(\"ocpuplot\")){","      return targetdiv.data(\"ocpuplot\");","    }","    var ocpuplot = function(){","      //local variables","      var Location;","      var n = \"last\";","      var pngwidth;","      var pngheight;","","      var plotdiv = $('<div />').attr({","        style: \"width: 100%; height:100%; min-width: 100px; min-height: 100px; position:relative; background-repeat:no-repeat; background-size: 100% 100%;\"","      }).appendTo(targetdiv).css(\"background-image\", \"none\");","","      var spinner = $('<span />').attr({","        style : \"position: absolute; top: 20px; left: 20px; z-index:1000; font-family: monospace;\"","      }).text(\"loading...\").appendTo(plotdiv).hide();","","      var pdf = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 10px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"pdf\").appendTo(plotdiv);","","      var svg = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 30px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"svg\").appendTo(plotdiv);","","      var png = $('<a />').attr({","        target: \"_blank\",","        style: \"position: absolute; top: 50px; right: 10px; z-index:1000; text-decoration:underline; font-family: monospace;\"","      }).text(\"png\").appendTo(plotdiv);","","      function updatepng(){","        if(!Location) return;","        pngwidth = plotdiv.width();","        pngheight = plotdiv.height();","        plotdiv.css(\"background-image\", \"url(\" + Location + \"graphics/\" + n + \"/png?width=\" + pngwidth + \"&height=\" + pngheight + \")\");","      }","","      function setlocation(newloc, newn){","        n = newn || n;","        Location = newloc;","        if(!Location){","          pdf.hide();","          svg.hide();","          png.hide();","          plotdiv.css(\"background-image\", \"\");","        } else {","          pdf.attr(\"href\", Location + \"graphics/\" + n + \"/pdf?width=11.69&height=8.27&paper=a4r\").show();","          svg.attr(\"href\", Location + \"graphics/\" + n + \"/svg?width=11&height=6\").show();","          png.attr(\"href\", Location + \"graphics/\" + n + \"/png?width=800&height=600\").show();","          updatepng();","        }","      }","","      // function to update the png image","      var onresize = debounce(function(e) {","        if(pngwidth == plotdiv.width() && pngheight == plotdiv.height()){","          return;","        }","        if(plotdiv.is(\":visible\")){","          updatepng();","        }","      }, 500);","","      // register update handlers","      plotdiv.on(\"resize\", onresize);","      $(window).on(\"resize\", onresize);","","      //return objects","      return {","        setlocation: setlocation,","        spinner : spinner","      };","    }();","","    targetdiv.data(\"ocpuplot\", ocpuplot);","    return ocpuplot;","  }","","  // from understore.js","  function debounce(func, wait, immediate) {","    var result;","    var timeout = null;","    return function() {","      var context = this, args = arguments;","      var later = function() {","        timeout = null;","        if (!immediate)","          result = func.apply(context, args);","      };","      var callNow = immediate && !timeout;","      clearTimeout(timeout);","      timeout = setTimeout(later, wait);","      if (callNow)","        result = func.apply(context, args);","      return result;","    };","  }","","  function testhtml5(){","    if( window.FormData === undefined ) {","      alert(\"Uploading of files requires HTML5. It looks like you are using an outdated browser that does not support this. Please install Firefox, Chrome or Internet Explorer 10+\");","      throw \"HTML5 required.\";","    }","  }","","  //export","  window.ocpu = window.ocpu || {};","  var ocpu = window.ocpu;","","  //global settings","  function seturl(newpath){","    if(!newpath.match(\"/R$\")){","      alert(\"ERROR! Trying to set R url to: \" + newpath +\". Path to an OpenCPU R package must end with '/R'\");","    } else {","      r_path = document.createElement('a');","      r_path.href = newpath;","      r_path.href = r_path.href; //IE needs this","","      if(location.protocol != r_path.protocol || location.host != r_path.host){","        r_cors = true;","        if (!('withCredentials' in new XMLHttpRequest())) {","          alert(\"This browser does not support CORS. Try using Firefox or Chrome.\");","        } else if(r_path.username && r_path.password) {","          //should only do this for calls to opencpu maybe","          var regex = new RegExp(r_path.host);","          $.ajaxSetup({","            beforeSend: function(xhr, settings) {","              //only use auth for ajax requests to ocpu","              if(regex.test(settings.url)){","                //settings.username = r_path.username;","                //settings.password = r_path.password;","","                /* take out user:pass from target url */","                var target = document.createElement('a');","                target.href = settings.url;","                settings.url = target.protocol + \"//\" + target.host + target.pathname","","                /* set basic auth header */","                settings.xhrFields = settings.xhrFields || {};","                settings.xhrFields.withCredentials = true;","                settings.crossDomain = true;","                xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(r_path.username + \":\" + r_path.password));","","                /* debug */","                console.log(\"Authenticated request to: \" + settings.url + \" (\" + r_path.username + \", \" + r_path.password + \")\")","              }","            }","          });","        }","      }","","      if(location.protocol == \"https:\" && r_path.protocol != \"https:\"){","        alert(\"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\")","      }","","      if(r_cors){","        console.log(\"Setting path to CORS server \" + r_path.href);","      } else {","        console.log(\"Setting path to local (non-CORS) server \" + r_path.href);","      }","","      //CORS disallows redirects.","      return $.get(r_path.href + \"/\", function(resdata){","        console.log(\"Path updated. Available objects/functions:\\n\" + resdata);","","      }).fail(function(xhr, textStatus, errorThrown){","        alert(\"Connection to OpenCPU failed:\\n\" + textStatus + \"\\n\" + xhr.responseText + \"\\n\" + errorThrown);","      });","    }","  }","","  //exported functions","  ocpu.call = r_fun_call;","  ocpu.rpc = rpc;","  ocpu.seturl = seturl;","","  //exported constructors","  ocpu.Snippet = Snippet;","  ocpu.Upload = Upload;","","  //for innernetz exploder","  if (typeof console == \"undefined\") {","    this.console = {log: function() {}};","  }","","}( jQuery ));"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":8,"column":0},"end":{"row":13,"column":84},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1480562802535,"hash":"4c4c6896dfdbed1a25d9ff9aaf857335decf1a07"}